#!/bin/bash

set -eu
trap exit INT TERM

################################################################################

TARGET_ARCHITECTURE="linux/amd64"
TARGET_PACKAGE=""
OUTPUT=""
while [ $# -gt 0 ] ; do
key="$1"
case $key in
  --arch)   TARGET_ARCHITECTURE="$2"; shift; shift; ;;
  --pkg)    TARGET_PACKAGE="$2";      shift; shift; ;;
  --output) OUTPUT="$2";              shift; shift; ;;
  *)                                  shift;        ;;
esac
done

################################################################################

if [ -z "${TARGET_PACKAGE}" ] ; then
  (>&2 echo "[error] target package not provided")
  exit 1
fi

if [ -z "${OUTPUT}" ] ; then
  (>&2 echo "[error] output not provided")
  exit 1
fi

################################################################################

lifecycle::scala::pack() {
  local dir="$1"
  if [ -z ${dir} -o ! -d ${dir} ] ; then
    return
  fi

  local arch=${TARGET_ARCHITECTURE#*/}
  local platform=${TARGET_ARCHITECTURE%%/*}
  local output=${OUTPUT}/${TARGET_PACKAGE}-${platform}-${arch}

  echo "[info] (${platform}/${arch}) packaging ${TARGET_PACKAGE}"
  cd ${dir} && sbt -Dsbt.ivy.home=${dir}/.ivy pack

  if [ -f ${output} ] ; then
    rm -f ${output}
  fi
  mkdir -p ${output}
  cp -R ${dir}/target/pack/bin ${output}
  cp -R ${dir}/target/pack/lib ${output}

  echo "[info] (${platform}/${arch}) check"
  du -hs ${output}

  echo "[info] (${platform}/${arch}) done"
}

################################################################################

lifecycle::scala::pack \
  /project/services/${TARGET_PACKAGE}
