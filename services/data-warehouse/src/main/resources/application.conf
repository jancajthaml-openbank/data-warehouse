
akka {
  library-extensions = []
  stdout-loglevel = "OFF"
  log-config-on-start = off
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "DEBUG"
  loglevel = ${?DATA_WAREHOUSE_LOG_LEVEL}
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
  log-dead-letters = 10
  log-dead-letters-during-shutdown = on
  logger-startup-timeout = 5s

  http {
    host-connection-pool {
      max-connections = 32
      max-open-requests = 64
    }
    server {
      bind-timeout = 2 seconds
      idle-timeout = 10 minutes
      request-timeout = 1 minutes
    }
  }

  ssl-config {
    enabledProtocols = ["TLSv1.2"]
  }

  actor {
    debug {
      unhandled = on
    }
  }

}

statsd {
  url = "udp://127.0.0.1:8125"
  url = ${?DATA_WAREHOUSE_STATSD_URL}
}

http {
  service {
    port = 8080
    port = ${?DATA_WAREHOUSE_HTTP_PORT}
    bind-to = "0.0.0.0"
  }
}

data-exploration {

  primary {
    directory = "/data"
    directory = ${?DATA_WAREHOUSE_PRIMARY_STORAGE_PATH}
  }

  postgresql {
    url = "jdbc:postgresql://127.0.0.1:5432/openbank?prepareThreshold=1"
    url = ${?DATA_WAREHOUSE_POSTGRES_URL}
    user = "postgres"
    user = ${?DATA_WAREHOUSE_POSTGRES_USER}
    password = ""
    password = ${?DATA_WAREHOUSE_POSTGRES_PASSWORD}
    driver = org.postgresql.Driver
    connectionPool = "HikariCP"
    poolName = "postgres-persistence-secondary"
  }

  dispatcher {
    type = Dispatcher
    executor = "thread-pool-executor"
    thread-pool-executor {
      core-pool-size-min= 5
      core-pool-size-factor = 1.0
      core-pool-size-max = 40
      max-pool-size-min = 2
      max-pool-size-max = 40
      keep-alive-time = 1m
      allow-core-timeout = on
    }
    throughput = 1000
  }

}

graphql {

  postgresql {
    url = "jdbc:postgresql://127.0.0.1:5432/openbank?prepareThreshold=1"
    url = ${?DATA_WAREHOUSE_POSTGRES_URL}
    user = "postgres"
    user = ${?DATA_WAREHOUSE_POSTGRES_USER}
    password = ""
    password = ${?DATA_WAREHOUSE_POSTGRES_PASSWORD}
    driver = org.postgresql.Driver
    connectionPool = "HikariCP"
    poolName = "postgres-read-graphql"
  }

}
